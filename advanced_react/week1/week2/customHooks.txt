Custom Hooks 

Hooks give you a repeatable, streamlined way to deal 
with specific requirements in your React apps. 
useState hook gives us a reliable way to deal with state
updates in React components. 

1. A custom hook is simply a way to extract a piece of 
    functionality that you can use again and again.
2. You can code a custom hook when you want to avoid 
    duplication or when you do not want to build a piece 
    of functionality from scratch across multiple React projects. 

By coding a custom hook, you can create a reliable and streamlined 
way to reuse a piece of functionality in your React apps. 

Let's build a custom hook, and a simple React app. 

import { useState } from "react"; 

function App(){
    const [count, setCount] = useState(0); 

    function increment(){
        setCount(prevCount => prevCount + 1)
    }
    
    return(
        <div>
            <h1>Count: {count}</h1> 
            <button onClick={increment}>Plus 1</button> 
        </div> 
    );
}

export default App; 

--------
h1 heading shows the value of the count state variable 
and a button with an onClick event-handling attribute 
which, when triggered, invokes the `increment()` function. 
-------- 
Hook: 
Console log a variable's value whenever it gets updated. 
To handle console.log() invocations to use the useEffect hook. 

My custom hook will: 
    1. Need to use the useEffect hook 
    2. Be a separate file that you'll then use in the App component. 
--------
How to name a custom hook 
A custom hook needs to have a name that begins with use. 
The hook in this example will be used to log values to the 
console, let's name the hook `useConsoleLog`. 
--------
Coding a custom hook 
    1. Add it as a separate file, which you can name `useConsoleLog.js` 
    2. Add it to the root of the `src` folder, where the App.js component is located. 

useConsoleLog.js file 

import { useEffect } from "react"; 

function useConsoleLog(varName){
    useEffect(() => {
        console.log(varName); 
    }, [varName]); 
}

export default useConsoleLog; 

----------
Using a custom hook 

Once you have the custom hook coded, you can use it in 
any component in your app. 
 
import useConsoleLog from "./useConsoleLog"; 

use it, under the state-setting code: 

useConsoleLog(count); 

---------
App.js file: 

import { useState } from "react"; 
import useConsoleLog from "./useConsoleLog"; 

function App(){
    const [count, setCount] = useState(0); 
    useConsoleLog(count); 

    function increment(){
        setCount(prevCount => prevCount + 1); 
    }
    return(
        <div> 
            <h1>Count: {count}</h1> 
            <button onClick={increment}>Plus 1</button> 
        </div>
    ); 
}

export default App; 

