// UNCONTROLLED COMPONENTS \\ 

React recommends using controlled components to implement forms. 
It aligns with the React declarative model. 
Uncontrolled components are also valid. 

-------- Uncontrolled Inputs ---------- 
const Form = () => {
    return (
        <div>
            <input type="text" /> 
        </div> 
    ); 
};

They remember exactly what you typed, being the 
DOM itself that maintains that internal state. 
Using a React ref, you can get their value. 

How a ref is used to access the value of the input 
whenever the form is submitted? 

const Form = () => {
    const inputRef = useRef(null); 

    const handleSubmit = () => {
        const inputValue = inputRef.current.value; 
        //  Do something with the value 
    }
    return (
        <form onSubmit={handleSubmit}> 
            <input ref={inputRef} type="text" /> 
        </form> 
    ); 
}; 

You must pull the value from the field when needed. 

Uncontrolled components are certainly valued, especially 
when your form is straightforward. Not powerful as controlled inputs! 

// CONTROLLED INPUTS \\ 

    They accept their current value as a prop and a callback to change 
    that value. That implies that the value of the input has to live in 
    the React state somewhere. 

    Typically, the component that renders the input (like a form component) 
    saves that in its state: 

const Form = () => {
    const [value, setValue] = useState(""); 

    const handleChange = (e) => {
        setValue(e.target.value)
    }
    return(
        <form>
            <input 
                value={value}
                onChange={handleChange} 
                type="text"
            /> 
        </form>
    ); 
}; 

Every time you type a new character, the `handleChange` function is executed. 
    - It receives the new value of the input 
    - Then, it sets it in the state. 

This flow pushes the value changes to the form component compared to pulling like
in the ref example from the uncontrolled version. 
Form component always has the input's current value without needing to ask for it 
explicitly. 

Your data (React state) and UI (input tags) are always in sync. 
Forms can respond to input changes immediately, 
    - instant validation per field 
    - disabling the submit button unless all fields have valid data 
    - enforcing a specific input format, like phone or credit card numbers 

----- The file input type ---- 
Some specific form inputs that are always uncontrolled, like the file input tag. 
In React, an <input type="file" /> is always an uncontrolled component because its 
value is read-only and can't be set programmatically. 

How to create a ref to the DOM node to access any files selected in the form submit 
handler: 

const Form = () => {
    const fileInput = useRef(null); 

    const handleSubmit = (e) => {
        e.preventDefault(); 
        const files = fileInput.current.files; 

    }

    return(
        <form onSubmit = {handleSubmit}> 
        <input 
            ref={fileInput} 
            type="file" 
        /> 
        </form> 
    );
}; 

Uncontrolled components with refs are great if your form is 
incredibly simple regarding UI feedback. 
Else, controlled input fields are ideal if you need more features 
in your forms.

Feature             Uncontrolled            Controlled 
One-time value      Yes                     Yes 
retrieval 
(e.g., on submit)
----------
Validating on       Yes                     Yes 
submit
----------
Instant field       No                      Yes
validation 
----------
Conditionally       No                      Yes
disabling a 
submit button 
----------
Enforcing a         No                      Yes
specific 
input format
----------
Several inputs      No                      Yes 
for one piece 
of data 
----------
Dynamic inputs      No                      Yes


