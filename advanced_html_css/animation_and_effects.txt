---------- TRANSFORM PROPERTY  -----------

Syntax 
transform: transform function-values 

.sample-class{
    transform:rotate(60deg); 
}

keyword-value type: none 
.sample-class{
    transform: none;
}

Function-value type: matrix()
variations: matrix(), matrix3d() 

.sample-class{
    transform: matrix(1.0, 2.0, 3.0, 4.0, 5.0, 6.0); 
}

Function-value type: rotate(deg) 
variations: rotate(), rotate3d(), rotateX(), rotate(), rotateZ()

.sample-class{
    transform: rotate3d(3,2,1, 100deg); 
}

In rotate3d(), the respective values represent x,y,z co-ordinate and degree of rotations. 

Function-value type: translate(x,y)
variations: translate(), translate3d(), translateX(), translateY(), translateZ() 

.sample-class{
    transform: translate3d(10px, 20px, 30px); 
}

In translate3d(), the respective values represent translation along the x,y,z co-ordinates. 

Function-value type: scale(factor)
variations: scale(), scale3d(), scaleX(), scaleY(), scaleZ() 

.sample-class{
    transform: scale3d(2,1,0.3);
}

In scale3d(), the respective values represent scaling times along 
the x,y,z co-ordinates. 

Function-value type: skew(deg,deg) 
variations: skew(), skewX(), skewY() 

.sample-class{
    transform: skew(100deg); 
}

Global value types: 
.sample-class{
    transform:inherit; 
}
.sample-class{
    transform: initial;
}
.sample-class{
    transform: revert;
}
.sample-class{
    transform: revert-layer;
}
.sample-class{
    transform: unset;
}

------- Multiple transform over the same element ----- 
Transform can be applied for rotate(), scale(), and translate(). 
Each of these properties can have their own values and the actions 
will give a combined effect. 

.sample-class{
    transform: rotate(45deg) scale(1.5) translate(45px); 
}

Additional property under transform: transform-origin 
determines the anchor point for the centering of transform 

.sample-class{
    transform-origin: 10px 10px; 
}

.sample-class{
    transform-origin: right bottom; 
}

--------- Transition property --------
Transition has sub-properties: 
    - transition-property 
    - transition-duration 
    - transition-timing-function 
    - transition-delay 

You have to list the values without naming them individually. 
Values skipped will be assigned their default values. 

Syntax: transition property duration timing-function delay; 

Example: 
transition: margin-left2s ease-in-out 0.5s; 

------- Animations and @keyframes ---------------
animation property: 
Syntax 
animation: name duration timing-function delay iteration-count 
direction fill-mode play-state; 

Example 
.sample-class{
    animation: none 2 ease 0.5 4 normal none running; 
}

The animation property for the sub-properties: 
    - animation-name 
    - animation-duration 
    - animation-timing-function 
    - animation-delay 
    - animation-iteration-count 
    - andimation-direction 
    - animation-fill-mode 
    - animation-play-state 

Animation-name property is used to tie-in the @keyframes rule. 

---------- @keyframes ----------
Syntax 

@keyframes mymove{
    from {property: value} 
    to {property: value}
}

@keyframes animation-name {
    from {bottom: 0px;} 
    to {bottom: 100px;}
}

% denotes the timing of the animation 

Alternative syntax 

@keyframes animation-name {
    /* declare actions here */
}

@keyframes animation-name {
    0%,100% {
        background-color: blue; 
    }
    50% {
        background-color: green;
    }
}

------- Multiple animations ------
#some-class{
    animation: animation-a 2s linear infinite alternate, 
                animation-b 3s ease infinite alternate; 
}

 