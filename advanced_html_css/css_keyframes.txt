------- KEYFRAMES ------------

Keyframes are a type of at-rule which are represented by the '@' suffix. 
At-rules are statements inside CSS that describe how to behave or perform 
certain actions. Keyframes are defined as '@keyframes' in CSS code. 
@keyframes are part of the animation sequence and help in defining the steps inside it. 

    Imagine an object on your web page moving from point A to B. 
    Use the transition and transform properties to achieve the above. 
    But, animation sequences are for more complex behavior in an easier way. 


// from {} and to{} keywords and using % syntax \\ 

@keyframes animation-name {
    from {
        property-a: value-a; 
    }

    to {
        property-a: value-b; 
    }
}


'from' and 'to' are used inside the @keyframes 
rule to mark the transition of one or more properties 
and can be seen as the start and end points of that transition. 

The values of 'property-a' changes from 'value-a' to 'value-b'. 
The @keyframes allows you to add more steps to your animation by '%' 
that represents the completion of the animation. 


@keyframes identifier {
    0% {transform rotate(100deg);} 
    30% {opacity: 1;} 
    50% {opacity: 0.50;}
    70% {opacity: 1;} 
    100% {transform: rotate(50deg);}
}

The different '%s' used in the example demonstrate the progression 
of the animation. 

Note: it doesn't have to be the same property that you modify in these 
steps. That's not possible using the transition property, but with @keyframes it is possible. 
Also, animations can loop infinitely, run forwards, reverse and alternate which is a plus. 

@keyframes are tied in the animation-name to which they are going to be applied. 
Animation property consists of other sub-properties. Animation-name and animation-duration 
must be defined while others: timing-function, delay, direction, fill-more, iteration-count, ... 
can be added. 

Animation propery consists of the following properties with their default value: 
    - animation-name: none 
    - animation-duration: 0s 
    - animation-timing-function: ease 
    - animation-delay: 0s 
    - animation-iteration-count: 1 
    - animation-direction: normal 
    - animation-fill-mode: none 
    - animation-play-state: running 
    - animation-timeline: auto 

If any of these values are not defined, they will be the default. 
Of these, the first property of the animation-name is what's used 
to tie it to the @keyframes rule. 

// Animation example \\ 

HTML Code: 

<body> 
<div class="box"></div> 
</body> 
</html> 

CSS code: 

body {
    padding: 30px;
}

.box {
    background-color: lightcoral; 
    width: 50px; 
    height: 50px; 
    animation: myanimation 3s infinite ease-in; 
}

@keyframes myanimation{
    from{width: 50px;}
    to{width: 100px;}
}

<!--
    The width of the object changes from 50 pixels to 100 over a span of 3s and loops infinitely afterward.
-->

Adding percentages to the rule will have the same output: 

@keyframes myanimation{
    0%{width: 50px;}
    100%{width: 100px;}
}

Let's add an intermediary step at 50% 

@keyframes myanimation{
    0%{width: 50px;}
}

50%{background-color: aquamarine; height:20px;}
100%{width: 100px;}

The output is drastically different now after adding 2 lines of code. 
Animation property and @keyframes rule can be used in creative ways 
to enhance a web page. 


