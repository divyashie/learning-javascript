PARENT-CHILD DATA FLOW 

In React, data flow is unidirectional. The data in React 
flows from a parent component to a child component. 
The data flow starts at the root and can flow to multiple 
levels of nesting, from the root component(parent component) 
to the child component, then the grandchild component, and further 
down the hierarchy. 

A React app consists of many components, organized as a component tree. 
The data flows from the root component to all the components in the tree 
structure that require this data, using props. 

Props are immutable (cannot be changed). 
unidirectional data flow allows devs to: 
    1. Comprehend the logic of React apps more quickly 
    2. simplify the data flow

Imagine parent component passes a prop (name) to the child 
component, the latter then uses this prop to render the name 
in the UI. 

Parent component: 

function Dog(){
    return(
        <Puppy name="Max" bowlShape="square" bowlStatus="full" /> 
    ); 
}; 

Child component: 
function Puppy(props){
    return(
        <div> 
            {props.name} has <Bowl bowlShape="square" bowlStatus="full" /> 
        </div>
    );
}; 

function Bowl(props){
    return(
        <span> 
            {props.bowlShape}-shaped bowl, and it's currently {props.bowlStatus}
    );
}; 

